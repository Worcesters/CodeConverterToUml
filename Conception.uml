@startuml

class Registry {
   + initialize_project_with_root()
}

package "ParserModule" {
 interface ParseInterface {
    + {abstract} parse(line: str)
 }
 ParseInterface --> Registry

 class MethodParser {
   + visibility
   + return_type
   + name: str
   + abstract: bool
   + params: []
 }
 MethodParser ..|> ParseInterface

 class AttributeParser {
   + name: str
   + visibility: str
   + type
 }
 AttributeParser ..|> ParseInterface

 class StructureParser {
   + name: str
   + visibility: str
 }
 StructureParser ..|> ParseInterface
}

enum Language {
    PHP
    PYTHON
    JAVA
}

class ParseDispatcher{
    - language: Language
    + patterns{Language{}}
    + get_pattern(pattern_key)
}
Language <-- ParseDispatcher: uses >
ParseDispatcher o-- ParseInterface: dispatches >

package "TreeModule" {
 class Tree {
    + root: TreeElement
 }
 Tree --> TreeElement
 Registry --|> Tree

 class TreeElement {
    + parent: TreeElement
    + children: TreeElement[]
    + set_parent(parent: TreeElement)
    + add_child(child: TreeElement)
    + add_children(children : TreeElement[])
    + get_child(num_child: int): TreeElement
    + get_children(): TreeElement[]
    + get_parent(): TreeElement
 }
}

class CodeStructureDiagram {
    + add_hierarchy(hierarchy)
    + add_class(class_obj)
    + add_method(method)
    + add_interface(interface)
    + generate_diagram_code()
}

class ParseManager {
    - registry: Registry 
    - parsers: ParseInterface[]
    + parse_file(file_path)
    + parse_files(file_paths)
    + parse_folders(folder_path)
    + add_parsers(parser)
    + reset_parsers()
}

ParseManager o-- ParseInterface 
Registry --> CodeStructureDiagram

@enduml
